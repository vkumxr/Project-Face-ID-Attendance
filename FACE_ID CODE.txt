1. Install required Libraries:- 

pip install opencv-python face_recognition pandas


2. Registration (Data Collection)

import cv2
import os

def capture_faces(name):
    cap = cv2.VideoCapture(0)
    count = 0
    os.makedirs(f"dataset/{name}", exist_ok=True)

    while True:
        ret, frame = cap.read()
        if not ret:
            break
        cv2.imshow("Register Face", frame)
        cv2.imwrite(f"dataset/{name}/{count}.jpg", frame)
        count += 1
        if count >= 20:  # Capture 20 samples
            break
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    cap.release()
    cv2.destroyAllWindows()

3. Face Encoding and Storage:-

import face_recognition
import os
import pickle

def encode_faces():
    known_encodings = []
    known_names = []

    for name in os.listdir("dataset"):
        for img_file in os.listdir(f"dataset/{name}"):
            img_path = f"dataset/{name}/{img_file}"
            image = face_recognition.load_image_file(img_path)
            encodings = face_recognition.face_encodings(image)
            if encodings:
                known_encodings.append(encodings[0])
                known_names.append(name)

    with open("encodings.pkl", "wb") as f:
        pickle.dump((known_encodings, known_names), f)

4. Real-Time Face Recognition and Attendance Logging:-

import datetime
import pandas as pd

def mark_attendance(name):
    df = pd.read_csv("attendance.csv") if os.path.exists("attendance.csv") else pd.DataFrame(columns=["Name", "Date", "Time"])
    now = datetime.datetime.now()
    date = now.strftime("%Y-%m-%d")
    time = now.strftime("%H:%M:%S")

    if not ((df["Name"] == name) & (df["Date"] == date)).any():
        df = df.append({"Name": name, "Date": date, "Time": time}, ignore_index=True)
        df.to_csv("attendance.csv", index=False)

def recognize_faces():
    with open("encodings.pkl", "rb") as f:
        known_encodings, known_names = pickle.load(f)

    cap = cv2.VideoCapture(0)

    while True:
        ret, frame = cap.read()
        if not ret:
            break
        small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
        rgb_frame = cv2.cvtColor(small_frame, cv2.COLOR_BGR2RGB)

        face_locations = face_recognition.face_locations(rgb_frame)
        face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)

        for encoding, loc in zip(face_encodings, face_locations):
            matches = face_recognition.compare_faces(known_encodings, encoding)
            name = "Unknown"

            if True in matches:
                match_index = matches.index(True)
                name = known_names[match_index]
                mark_attendance(name)

            top, right, bottom, left = [i*4 for i in loc]
            cv2.rectangle(frame, (left, top), (right, bottom), (0,255,0), 2)
            cv2.putText(frame, name, (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255), 2)

        cv2.imshow("Attendance System", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    cap.release()
    cv2.destroyAllWindows()


A GUI Tkinter can also be used:-

import tkinter as tk
from tkinter import simpledialog

root = tk.Tk()
root.title("Face Attendance System")

tk.Button(root, text="Register", command=lambda: capture_faces(simpledialog.askstring("Input", "Enter name"))).pack()
tk.Button(root, text="Encode Faces", command=encode_faces).pack()
tk.Button(root, text="Start Attendance", command=recognize_faces).pack()

root.mainloop()
